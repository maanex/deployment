version: "3.3"

services:

  prometheus:
    image: prom/prometheus
    volumes:
      - prometheus-data:/prometheus
      - /root/services/deployment/production/prometheus/:/etc/prometheus/
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - metrics
    deploy:
      placement:
        constraints:
        - node.role == manager
      # labels:
        # - traefik.enable=true
        # - traefik.docker.network=traefik-public
        # - traefik.http.routers.prometheus.entrypoints=http
        # - traefik.http.routers.prometheus.rule=Host(`red.localhost`)
        # - traefik.http.services.prometheus.loadbalancer.server.port=9090

  grafana:
    image: grafana/grafana
    # depends_on:
    #   - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - /root/services/deployment/production/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - /root/services/deployment/production/grafana/config.monitoring
    networks:
      - traefik-public
      - metrics
    ports:
      - 9919:3000
    deploy:
      placement:
        constraints:
          - node.role == manager
      # labels:
      #   - traefik.enable=true
      #   - traefik.docker.network=traefik-public
      #   - traefik.http.services.grafana.loadbalancer.server.port=3000
      #   - traefik.http.routers.grafana.entrypoints=https
      #   - traefik.http.routers.grafana.rule=Host(`monitoring.infra.maanex.me`)
      #   - traefik.http.routers.grafana.tls.certresolver=letsencrypt


networks:
  traefik-public:
    external: true
  redis:
    external: true
  metrics:
    external: true

volumes:
  prometheus-data: {}
  grafana-data: {}

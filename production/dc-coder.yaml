version: "3.9"

services:
  coder:
    image: ghcr.io/coder/coder:latest
    networks:
      - db
      - proxy
    environment:
      CODER_PG_CONNECTION_URL: "postgresql://coder:${CODER_POSTGRES_PASSWORD}@database/coder?sslmode=disable"
      CODER_ADDRESS: "0.0.0.0:3000"
      CODER_ACCESS_URL: "https://devspace.tude.network"
      CODER_WILDCARD_ACCESS_URL: "*.devenv.tude.network"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /root/services/deployment/production/coder/:/home/coder/
    depends_on:
      - database

    deploy:
      placement:
        constraints:
          - node.hostname == co2
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        - traefik.http.services.devspace.loadbalancer.server.port=3000
        - traefik.http.routers.devspace.entrypoints=https
        - traefik.http.routers.devspace.rule=Host(`devspace.tude.network`)
        - traefik.http.routers.devspace.tls.certresolver=cloudflare
        - traefik.http.routers.devspace.tls.domains[0].main=devspace.tude.network
        - traefik.http.services.devspaceenv.loadbalancer.server.port=3000
        - traefik.http.routers.devspaceenv.entrypoints=https
        - traefik.http.routers.devspaceenv.rule=Host(`test.devenv.tude.network`)
        - traefik.http.routers.devspaceenv.tls.certresolver=cloudflare
        - traefik.http.routers.devspaceenv.tls.domains[0].main=test.devenv.tude.network

  database:
    image: "postgres:14.2"
    ports:
      - "5432:5432"
    networks:
      - db
    environment:
      POSTGRES_USER: coder
      POSTGRES_PASSWORD: ${CODER_POSTGRES_PASSWORD}
      POSTGRES_DB: coder
    volumes:
      - coder_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U coder -d coder" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  coder_data:

networks:
  proxy:
    external: true
  db:
    driver: overlay

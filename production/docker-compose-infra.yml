version: "3.3"

services:
  # traefik:
  #   image: traefik:2.2
  #   command:
  #     # - --api.insecure
  #     - --api.dashboard
  #     - --providers.docker=true
  #     - --providers.docker.swarmmode=true
  #     - --providers.docker.exposedbydefault=false
  #     - --entrypoints.metrics.address=:8082
  #     - --entrypoints.http.address=:80
  #     - --entrypoints.https.address=:443
  #     #* for cloudflare proxy
  #     - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
  #     - --certificatesresolvers.letsencrypt.acme.email=team@freestuffbot.xyz
  #     - --certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json
  #     - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
  #     - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
  #     # - --certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
  #     - --metrics.prometheus
  #     - --metrics.prometheus.entryPoint=metrics
  #   networks:
  #     - traefik-public
  #   ports:
  #     - 80:80     # web main
  #     - 443:443     # https
  #     - 8082:8082 # traefik metrics
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - traefik-public-certificates:/certificates
  #   environment:
  #     CF_DNS_API_TOKEN_FILE: /run/secrets/cf-api-token
  #     CF_ZONE_API_TOKEN_FILE: /run/secrets/cf-api-token
  #   deploy:
  #     mode: global
  #     placement:
  #       constraints:
  #         - node.role == manager
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #     labels:
  #       - traefik.enable
  #       - traefik.docker.network=traefik-public
  #       - traefik.http.services.traefik-api.loadbalancer.server.port=8080
  #       - traefik.http.routers.traefik-api.rule=Host(`traefik.infra.maanex.me`)
  #       - traefik.http.routers.traefik-api.entrypoints=https
  #       - traefik.http.routers.traefik-api.tls
  #       - traefik.http.routers.traefik-api.service=api@internal
  #       - traefik.http.routers.traefik-api.tls.certresolver=letsencrypt
  #       - traefik.http.routers.traefik-api.tls.domains[0].main=freestuffbot.xyz
  #       - traefik.http.routers.traefik-api.tls.domains[0].sans=*.freestuffbot.xyz
  #       - traefik.http.routers.traefik-api.tls.domains[1].main=infra.maanex.me
  #       - traefik.http.routers.traefik-api.tls.domains[1].sans=*.infra.maanex.me
        
  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - prometheus-data:/prometheus
      - /root/services/deployment/production/prometheus/:/etc/prometheus/
    command:
      - '--config.file=/root/services/deployment/production/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - metrics
    deploy:
      placement:
        constraints:
        - node.role == manager
      # labels:
        # - traefik.enable=true
        # - traefik.docker.network=traefik-public
        # - traefik.http.routers.prometheus.entrypoints=http
        # - traefik.http.routers.prometheus.rule=Host(`red.localhost`)
        # - traefik.http.services.prometheus.loadbalancer.server.port=9090

  grafana:
    image: grafana/grafana
    # depends_on:
    #   - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - /root/services/deployment/production/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - /root/services/deployment/production/config.monitoring
    networks:
      - traefik-public
      - metrics
    ports:
      - 9919:3000
    deploy:
      placement:
        constraints:
          - node.role == manager
      # labels:
      #   - traefik.enable=true
      #   - traefik.docker.network=traefik-public
      #   - traefik.http.services.grafana.loadbalancer.server.port=3000
      #   - traefik.http.routers.grafana.entrypoints=https
      #   - traefik.http.routers.grafana.rule=Host(`monitoring.infra.maanex.me`)
      #   - traefik.http.routers.grafana.tls.certresolver=letsencrypt

  redis:
    image: redis
    volumes:
      - redis-data:/var/lib/redis
    networks:
      - redis


networks:
  traefik-public:
    external: true
  redis:
    external: true
  metrics:
    external: true

volumes:
  prometheus-data: {}
  grafana-data: {}
  redis-data: {}
  traefik-public-certificates: {}
